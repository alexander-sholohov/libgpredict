# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_satpredict', [dirname(__file__)])
        except ImportError:
            import _satpredict
            return _satpredict
        if fp is not None:
            try:
                _mod = imp.load_module('_satpredict', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _satpredict = swig_import_helper()
    del swig_import_helper
else:
    import _satpredict
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SatCalc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatCalc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatCalc, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_SatCalc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_SatCalc
    __del__ = lambda self : None;
    def findFirst(self, *args): return _satpredict.SatCalc_findFirst(self, *args)
    def findNext(self, *args): return _satpredict.SatCalc_findNext(self, *args)
    def getCurrentPass(self, *args): return _satpredict.SatCalc_getCurrentPass(self, *args)
    def getSatPosition(self, *args): return _satpredict.SatCalc_getSatPosition(self, *args)
    def maxDaysLookAhead(self): return _satpredict.SatCalc_maxDaysLookAhead(self)
    def set_maxDaysLookAhead(self, *args): return _satpredict.SatCalc_set_maxDaysLookAhead(self, *args)
SatCalc_swigregister = _satpredict.SatCalc_swigregister
SatCalc_swigregister(SatCalc)

class PassItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PassItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PassItem, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_PassItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_PassItem
    __del__ = lambda self : None;
    def aos(self): return _satpredict.PassItem_aos(self)
    def los(self): return _satpredict.PassItem_los(self)
    def tca(self): return _satpredict.PassItem_tca(self)
    def max_el(self): return _satpredict.PassItem_max_el(self)
    def aos_az(self): return _satpredict.PassItem_aos_az(self)
    def los_az(self): return _satpredict.PassItem_los_az(self)
    def orbit(self): return _satpredict.PassItem_orbit(self)
    def maxel_az(self): return _satpredict.PassItem_maxel_az(self)
    def vis(self): return _satpredict.PassItem_vis(self)
PassItem_swigregister = _satpredict.PassItem_swigregister
PassItem_swigregister(PassItem)

class SatPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatPosition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_SatPosition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_SatPosition
    __del__ = lambda self : None;
    def lat(self): return _satpredict.SatPosition_lat(self)
    def lon(self): return _satpredict.SatPosition_lon(self)
    def azimuth(self): return _satpredict.SatPosition_azimuth(self)
    def elevation(self): return _satpredict.SatPosition_elevation(self)
    def footprint(self): return _satpredict.SatPosition_footprint(self)
    def altitude(self): return _satpredict.SatPosition_altitude(self)
    def velocity(self): return _satpredict.SatPosition_velocity(self)
    def range(self): return _satpredict.SatPosition_range(self)
    def rangeRate(self): return _satpredict.SatPosition_rangeRate(self)
    def dopplerInHz(self): return _satpredict.SatPosition_dopplerInHz(self)
SatPosition_swigregister = _satpredict.SatPosition_swigregister
SatPosition_swigregister(SatPosition)

class TQth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TQth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TQth, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_TQth()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_TQth
    __del__ = lambda self : None;
    def initFromLatLon(self, *args): return _satpredict.TQth_initFromLatLon(self, *args)
    def initFromMaidenheadLocator(self, *args): return _satpredict.TQth_initFromMaidenheadLocator(self, *args)
    def convertToMaidenheadLocator(self): return _satpredict.TQth_convertToMaidenheadLocator(self)
    def lat(self): return _satpredict.TQth_lat(self)
    def lon(self): return _satpredict.TQth_lon(self)
    def alt(self): return _satpredict.TQth_alt(self)
TQth_swigregister = _satpredict.TQth_swigregister
TQth_swigregister(TQth)

class TSat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_TSat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_TSat
    __del__ = lambda self : None;
    def initFromTLELines(self, *args): return _satpredict.TSat_initFromTLELines(self, *args)
TSat_swigregister = _satpredict.TSat_swigregister
TSat_swigregister(TSat)

class TTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTime, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _satpredict.new_TTime()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _satpredict.delete_TTime
    __del__ = lambda self : None;
    def initFromNow(self): return _satpredict.TTime_initFromNow(self)
    def initFromStringUTC(self, *args): return _satpredict.TTime_initFromStringUTC(self, *args)
    def initFromUnixStamp(self, *args): return _satpredict.TTime_initFromUnixStamp(self, *args)
    def initFromTTime(self, *args): return _satpredict.TTime_initFromTTime(self, *args)
    def addSeconds(self, *args): return _satpredict.TTime_addSeconds(self, *args)
    def asString(self): return _satpredict.TTime_asString(self)
    def toUnixStamp(self): return _satpredict.TTime_toUnixStamp(self)
    def diffAsString(self, *args): return _satpredict.TTime_diffAsString(self, *args)
    def diffInSeconds(self, *args): return _satpredict.TTime_diffInSeconds(self, *args)
TTime_swigregister = _satpredict.TTime_swigregister
TTime_swigregister(TTime)

# This file is compatible with both classic and new-style classes.


